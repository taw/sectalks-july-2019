#!/usr/bin/env ruby

require "openssl"
require "socket"
require "pathname"

class String
  def to_hexes
    bytes.map{|u| "%02x" % u}.join
  end

  def from_hexes
    scan(/../).map{|u| u.to_i(16)}.pack("C*")
  end
end

def admin?(msg)
  msg.include?("admin=yes")
end

def encrypt(msg)
  crypt = OpenSSL::Cipher.new("DES-EDE3-CBC")
  crypt.encrypt
  crypt.key = @key
  ct = crypt.update(msg) + crypt.final
  ct.to_hexes
end

def decrypt(msg)
  crypt = OpenSSL::Cipher.new("DES-EDE3-CBC")
  crypt.decrypt
  crypt.key = @key
  pt = crypt.update(msg.from_hexes) + crypt.final
  pt
end

def client_session(client)
  client.puts "Welcome to the encryption server"
  client.puts "Commands available:"
  client.puts "* encrypt - generate a cookie"
  client.puts "* login - login with encrypted cookie"

  cmd = client.gets.chomp
  case cmd
  when "encrypt"
    client.puts "Enter cookie content to encrypt:"
    msg = client.gets.chomp
    if admin?(msg)
      client.puts "Admin cookie attempted, but you're not admin"
    else
      cookie = encrypt(msg)
      client.puts "Cookie: #{cookie}"
    end

  when "login"
    client.puts "Enter encrypted cookie:"
    cookie = client.gets.chomp
    msg = decrypt(cookie)
    client.puts "Received cookie: #{msg}"
    if admin?(msg)
      client.puts "Login successful"
      client.puts "Flag: #{ @flag }"
    else
      client.puts "Login failed"
    end
  else
    client.puts "Unrecognized command: #{cmd}"
  end

  client.puts "Goodbye!"
end

@flag = Pathname("flag.txt").read.chomp
@key = Random::DEFAULT.bytes(24)

server = TCPServer.open(9001)
loop do
  Thread.fork(server.accept) do |client|
    begin
      client_session(client)
    ensure
      client.close
    end
  end
end
